version: '3.8'

networks:
  voting_network:
    driver: bridge

volumes:
  db_data:
  uploads:
  portainer_data:
  logs_volume:
  rabbitmq_logs:
    driver: local

services:
  # Traefik - reverse proxy
  traefik:
    image: traefik:v2.9
    container_name: voting_traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./acme.json:/acme.json
    networks:
      - voting_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.local.digitalwahl.org`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=web"

  # API Service
  api:
    build:
      context: ../..
      dockerfile: docker/local/Dockerfile.api
    container_name: voting_api
    restart: unless-stopped
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD", "node", "healthcheck.js", "api"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      - NODE_ENV=development
      - JWT_SECRET=localsecretkey
      - DATABASE_HOST=db
      - DATABASE_USER=user
      - DATABASE_PASSWORD=1234
      - DATABASE_NAME=application
      - EMAIL_HOST=mailhog
      - EMAIL_PORT=1025
      - HOST=localhost
      - APP_PORT=4000
      - GRAPHQL_ENDPOINT=/graphql
      - WEBSOCKET_ENDPOINT=/graphql
      # RabbitMQ-Verbindung für die API
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
    volumes:
      - uploads:/app/uploads
    depends_on:
      - db
      - rabbitmq # Abhängigkeit zu RabbitMQ hinzufügen
    networks:
      - voting_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`local.digitalwahl.org`) && (PathPrefix(`/api`) || PathPrefix(`/graphql`) || PathPrefix(`/subscriptions`) || PathPrefix(`/login`) || PathPrefix(`/organizer`) || PathPrefix(`/event/verify-slug`) || PathPrefix(`/zoom`) || PathPrefix(`/media`) || PathPrefix(`/logout`))"
      - "traefik.http.routers.api.priority=1"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=4000"

  # Vote Consumer Service
  consumer:
    build:
      context: ../..
      dockerfile: docker/local/Dockerfile.consumer
    container_name: voting_consumer
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js", "consumer"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 300M
        reservations:
          cpus: '0.10'
          memory: 150M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=db
      - DATABASE_USER=user
      - DATABASE_PASSWORD=1234
      - DATABASE_NAME=application
      # RabbitMQ connection for consumer
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
    depends_on:
      - db
      - rabbitmq
      - api
    networks:
      - voting_network

  # Client Service - Development Mode
  client:
    build:
      context: ../..
      dockerfile: docker/local/Dockerfile.client
    container_name: voting_client
    restart: unless-stopped
    ports:
      - "8090:80"
    volumes:
      - ../../voting-service-client-v2:/app:delegated
      # Exclude node_modules from mounting to avoid platform-specific binary issues
      - /app/node_modules
    depends_on:
      - api
    networks:
      - voting_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`local.digitalwahl.org`)"
      - "traefik.http.routers.client.priority=10"
      - "traefik.http.routers.client-event.rule=Host(`local.digitalwahl.org`) && PathPrefix(`/event`) && !PathPrefix(`/event/verify-slug`)"
      - "traefik.http.routers.client-event.priority=5"
      - "traefik.http.routers.client-event.service=client"
      - "traefik.http.routers.client-event.entrypoints=web"
      - "traefik.http.routers.client.entrypoints=web"
      - "traefik.http.services.client.loadbalancer.server.port=80"

  # Database Service
  db:
    image: mariadb:10.5
    container_name: voting_db
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_USER=user
      - MYSQL_PASSWORD=1234
      - MYSQL_DATABASE=application
    volumes:
      - db_data:/var/lib/mysql
      - ../../voting-service-api/.docker/mariadb-conf:/etc/mysql/conf.d
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --max_connections=1500
    networks:
      - voting_network

  # Mailhog Service (for email testing)
  mailhog:
    image: mailhog/mailhog
    container_name: voting_mailhog
    restart: unless-stopped
    networks:
      - voting_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mailhog.rule=Host(`mail.local.digitalwahl.org`)"
      - "traefik.http.routers.mailhog.entrypoints=web"
      - "traefik.http.services.mailhog.loadbalancer.server.port=8025"

  # Adminer (database management)
  adminer:
    image: adminer:latest
    container_name: voting_adminer
    restart: unless-stopped
    depends_on:
      - db
    networks:
      - voting_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`db.local.digitalwahl.org`)"
      - "traefik.http.routers.adminer.entrypoints=web"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"

  # RabbitMQ mit korrektem Netzwerk und Traefik-Integration
  rabbitmq:
    build:
      context: ../..
      dockerfile: docker/local/Dockerfile.rabbitmq
    container_name: voting_rabbitmq
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 500M
        reservations:
          cpus: '0.20'
          memory: 200M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      # Standardwerte verwenden, falls Umgebungsvariablen nicht definiert sind
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    ports:
      # Standardports verwenden, falls Umgebungsvariablen nicht definiert sind
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_EXTERNAL_PORT:-15672}:15672"
    networks:
      - voting_network # Korrigiert von 'internal' zu 'voting_network'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.local.digitalwahl.org`)"
      - "traefik.http.routers.rabbitmq.entrypoints=web"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"

  # Portainer mit korrektem Netzwerk und Traefik-Integration
  portainer:
    image: portainer/portainer-ce:latest
    container_name: voting_portainer
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    networks:
      - voting_network # Korrigiert von 'internal' zu 'voting_network'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.local.digitalwahl.org`)"
      - "traefik.http.routers.portainer.entrypoints=web"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
