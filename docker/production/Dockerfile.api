# Multi-stage build for production API
FROM node:18-alpine AS base

# Install dependencies including monitoring and diagnostic tools
RUN apk add --no-cache curl tini netcat-openbsd dumb-init

# Set working directory
WORKDIR /app

# Copy package files
COPY voting-service-api/package.json voting-service-api/package-lock.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Development stage for building
FROM node:18-alpine AS build
WORKDIR /app
COPY voting-service-api/package.json voting-service-api/package-lock.json ./
RUN npm ci
COPY voting-service-api/ ./

# Build with debug info
RUN echo "=== DEBUG: Building API application ===" && \
    echo "Node version: $(node --version)" && \
    echo "NPM version: $(npm --version)" && \
    echo "Current directory: $(pwd)" && \
    echo "Environment variables:" && \
    env | grep -E "(NODE_ENV|DATABASE_|JWT_|EMAIL_)" || echo "No relevant env vars found" && \
    echo "Package.json scripts:" && \
    cat package.json | grep -A 10 '"scripts"' && \
    echo "Database.json content:" && \
    cat database.json && \
    echo "Source files:" && \
    find src -name "*.js" | head -10 && \
    echo "=== Starting build ===" && \
    npm run build && \
    echo "=== Build completed ===" && \
    echo "Dist directory contents:" && \
    ls -la dist/ && \
    echo "Migrations directory:" && \
    ls -la migrations/

# Production stage
FROM base AS production

# Copy built application with debug info
COPY --from=build /app/dist ./dist
COPY --from=build /app/package*.json ./
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/database.json ./database.json
COPY --from=build /app/migrations ./migrations
COPY --from=build /app/bin ./bin

# Debug: Show what was copied to production
RUN echo "=== DEBUG: Production stage API ===" && \
    echo "Production directory contents:" && \
    ls -la /app && \
    echo "Dist directory contents:" && \
    ls -la /app/dist && \
    echo "Database.json in production:" && \
    cat /app/database.json && \
    echo "Main entry point exists:" && \
    ls -la /app/dist/index.js 2>/dev/null || echo "dist/index.js not found" && \
    echo "Node modules installed:" && \
    ls /app/node_modules | head -10

# Copy health check and entrypoint scripts
COPY docker/production/healthcheck.js ./healthcheck.js
COPY docker/production/docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 -G nodejs

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads && \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Setup health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD node /app/healthcheck.js api

# Expose port
EXPOSE 4000

# Use dumb-init as init system
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start the service
CMD ["/docker-entrypoint.sh", "node", "dist/index.js"]