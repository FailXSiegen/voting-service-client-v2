# GitLab CI f√ºr Server-Runner (Shell Executor)
# Verwendet den lokal installierten Runner auf dem voting.failx.de Server

# Backup Job f√ºr Server-Runner
backup_database_server:
  stage: test-prepare
  script:
    - echo "üì¶ Erstelle Datenbank-Backup (Server-Runner)..."
    - |
      # Debug: Finde voting-tool Installation
      echo "Suche voting-tool Installation..."
      echo "M√∂gliche Pfade:"
      find /var/www -name "*voting*" -type d 2>/dev/null || echo "Keine voting Verzeichnisse in /var/www/"
      find /opt -name "*voting*" -type d 2>/dev/null || echo "Keine voting Verzeichnisse in /opt/"
      find /home -name "*voting*" -type d 2>/dev/null || echo "Keine voting Verzeichnisse in /home/"
      
      echo "Docker Container mit 'voting' im Namen:"
      docker ps | grep voting || echo "Keine voting Container gefunden"
      
      echo "Docker Networks:"
      docker network ls | grep voting || echo "Keine voting Networks gefunden"
      
      echo "Docker Volumes:"
      docker volume ls | grep voting || echo "Keine voting Volumes gefunden"
      
      # Versuche verschiedene Pfade
      VOTING_PATHS=(
        "/var/www/html/voting-tool"
        "/var/www/voting-tool" 
        "/opt/voting-tool"
        "/home/*/voting-tool"
        "$(pwd)"
      )
      
      VOTING_DIR=""
      for path in "${VOTING_PATHS[@]}"; do
        if [ -d "$path" ] && [ -f "$path/docker-compose.yml" ]; then
          VOTING_DIR="$path"
          echo "‚úÖ Gefunden: $VOTING_DIR"
          break
        fi
      done
      
      if [ -z "$VOTING_DIR" ]; then
        echo "‚ùå voting-tool Verzeichnis nicht gefunden!"
        echo "Aktuelle Directory-Struktur:"
        ls -la /var/www/ 2>/dev/null || echo "/var/www/ nicht vorhanden"
        exit 1
      fi
      
      # Wechsle ins gefundene Verzeichnis
      cd "$VOTING_DIR"
      
      # Backup-Verzeichnis erstellen
      mkdir -p /var/www/html/voting-tool-backups
      
      # Timestamp f√ºr Backup
      export BACKUP_TIMESTAMP=$(date +%Y%m%d-%H%M%S)
      export BACKUP_FILE="/var/www/html/voting-tool-backups/voting-db-backup-${BACKUP_TIMESTAMP}.sql"
      
      # Pr√ºfe Docker Compose Status
      echo "Docker Compose Status:"
      docker compose ps
      
      # Erstelle Backup
      echo "Erstelle Backup: ${BACKUP_FILE}"
      docker compose exec -T db mysqldump -u root -p${VOTING_DB_ROOT_PASSWORD:-root_password} ${VOTING_DB_NAME:-voting_db} > "${BACKUP_FILE}"
      
      # Pr√ºfe Backup
      if [ -s "${BACKUP_FILE}" ]; then
        echo "‚úÖ Backup erfolgreich erstellt: ${BACKUP_FILE}"
        echo "Backup-Gr√∂√üe: $(du -h ${BACKUP_FILE} | cut -f1)"
        
        # Speichere Info f√ºr nachfolgende Jobs
        echo "BACKUP_FILE=${BACKUP_FILE}" > backup-info.env
        echo "BACKUP_TIMESTAMP=${BACKUP_TIMESTAMP}" >> backup-info.env
      else
        echo "‚ùå Backup fehlgeschlagen!"
        exit 1
      fi
  artifacts:
    reports:
      dotenv: backup-info.env
    expire_in: 1 week
  when: manual
  only:
    - main
  tags:
    - server  # Nur auf Server-Runner ausf√ºhren

# Import Job f√ºr Server-Runner  
import_test_data_server:
  stage: test-prepare
  script:
    - echo "üì• Importiere Testdaten (Server-Runner)..."
    - |
      # Wechsle ins voting-tool Verzeichnis
      cd /var/www/html/voting-tool
      
      # Git Repository aktualisieren (falls Runner nicht automatisch pullt)
      git pull origin main || echo "Git pull failed, using existing files"
      
      # Pr√ºfe ob SQL-Datei existiert
      if [ ! -f "test-data/load-test-scenario.sql" ]; then
        echo "‚ùå SQL-Datei nicht gefunden!"
        echo "Verf√ºgbare Dateien:"
        find . -name "*.sql" -type f || echo "Keine SQL-Dateien gefunden"
        exit 1
      fi
      
      # Docker Compose Status pr√ºfen
      echo "Docker Compose Status:"
      docker compose ps
      
      # Importiere Testdaten
      echo "Importiere SQL-Daten..."
      docker compose exec -T db mysql -u root -p${VOTING_DB_ROOT_PASSWORD:-root_password} ${VOTING_DB_NAME:-voting_db} < test-data/load-test-scenario.sql
      
      if [ $? -eq 0 ]; then
        echo "‚úÖ Testdaten erfolgreich importiert"
        
        # Pr√ºfe importierte Daten
        USER_COUNT=$(docker compose exec -T db mysql -u root -p${VOTING_DB_ROOT_PASSWORD:-root_password} ${VOTING_DB_NAME:-voting_db} -e "SELECT COUNT(*) FROM event_user WHERE event_id = (SELECT id FROM event WHERE slug = 'lasttest-2025');" -N 2>/dev/null)
        echo "Importierte Testnutzer: ${USER_COUNT}"
        
        # Speichere Event-Informationen
        echo "TEST_EVENT_SLUG=lasttest-2025" > test-info.env
        echo "TEST_EVENT_URL=https://voting.failx.de/#/register/lasttest-2025" >> test-info.env
        echo "TEST_USER_COUNT=${USER_COUNT}" >> test-info.env
      else
        echo "‚ùå Import fehlgeschlagen!"
        exit 1
      fi
  artifacts:
    reports:
      dotenv: test-info.env
    expire_in: 1 week
  needs:
    - backup_database_server
  when: manual
  only:
    - main
  tags:
    - server

# Restore Job f√ºr Server-Runner
restore_database_server:
  stage: test-cleanup
  script:
    - echo "‚ôªÔ∏è Stelle Datenbank wieder her (Server-Runner)..."
    - |
      # Wechsle ins voting-tool Verzeichnis
      cd /var/www/html/voting-tool
      
      # Verwende Backup-File aus vorherigem Job oder suche neuestes
      if [ -z "${BACKUP_FILE}" ]; then
        echo "Suche nach neuestem Backup..."
        BACKUP_FILE=$(ls -t /var/www/html/voting-tool-backups/voting-db-backup-*.sql 2>/dev/null | head -1)
        echo "Gefundenes Backup: ${BACKUP_FILE}"
      fi
      
      # Pr√ºfe Backup-Datei
      if [ -f "${BACKUP_FILE}" ]; then
        echo "Stelle Backup wieder her: ${BACKUP_FILE}"
        
        # Docker Compose Status pr√ºfen
        echo "Docker Compose Status:"
        docker compose ps
        
        # Importiere Backup
        docker compose exec -T db mysql -u root -p${VOTING_DB_ROOT_PASSWORD:-root_password} ${VOTING_DB_NAME:-voting_db} < "${BACKUP_FILE}"
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Datenbank erfolgreich wiederhergestellt"
          
          # Pr√ºfe ob Testdaten entfernt wurden
          USER_COUNT=$(docker compose exec -T db mysql -u root -p${VOTING_DB_ROOT_PASSWORD:-root_password} ${VOTING_DB_NAME:-voting_db} -e "SELECT COUNT(*) FROM event_user WHERE event_id = (SELECT id FROM event WHERE slug = 'lasttest-2025');" -N 2>/dev/null || echo "0")
          echo "Verbleibende Testnutzer: ${USER_COUNT}"
        else
          echo "‚ùå Wiederherstellung fehlgeschlagen!"
          exit 1
        fi
      else
        echo "‚ùå Backup-Datei nicht gefunden: ${BACKUP_FILE}"
        echo "Verf√ºgbare Backups:"
        ls -la /var/www/html/voting-tool-backups/ || echo "Keine Backups gefunden"
        exit 1
      fi
  needs:
    - backup_database_server
  when: manual
  only:
    - main
  tags:
    - server