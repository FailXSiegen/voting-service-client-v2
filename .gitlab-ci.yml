# GitLab CI/CD Pipeline f√ºr Voting Tool
# Automatisches Build und Deploy bei Push auf main Branch

stages:
  - build
  - deploy

variables:
  # Docker Registry
  REGISTRY: "registry.failx.de"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  # Image Tags
  API_IMAGE: "${REGISTRY}/voting-tool/api"
  CLIENT_IMAGE: "${REGISTRY}/voting-tool/client"
  # Deployment Path auf dem gleichen Server
  DEPLOY_PATH: "/var/www/html/voting-tool"
  DOMAIN: "voting.failx.de"

# Basis-Job-Konfiguration
.docker_job:
  image: docker:24-cli
  before_script:
    - docker info
  tags:
    - docker
    - deploy

# Build API Image
build_api:
  extends: .docker_job
  stage: build
  script:
    - echo "üî® Building API image..."
    - docker build -f voting-tool/docker/production/Dockerfile.api -t ${API_IMAGE}:latest -t ${API_IMAGE}:${CI_COMMIT_SHORT_SHA} .
    - |
      if docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${REGISTRY} 2>/dev/null; then
        docker push ${API_IMAGE}:latest
        docker push ${API_IMAGE}:${CI_COMMIT_SHORT_SHA}
        echo "‚úÖ API image pushed to registry"
      else
        echo "‚ö†Ô∏è  Registry not available, using local images"
      fi
  only:
    - main
    - merge_requests

# Build Client Image
build_client:
  extends: .docker_job
  stage: build
  script:
    - echo "üî® Building Client image..."
    - docker build -f voting-tool/docker/production/Dockerfile.client -t ${CLIENT_IMAGE}:latest -t ${CLIENT_IMAGE}:${CI_COMMIT_SHORT_SHA} .
    - |
      if docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${REGISTRY} 2>/dev/null; then
        docker push ${CLIENT_IMAGE}:latest
        docker push ${CLIENT_IMAGE}:${CI_COMMIT_SHORT_SHA}
        echo "‚úÖ Client image pushed to registry"
      else
        echo "‚ö†Ô∏è  Registry not available, using local images"
      fi
  only:
    - main
    - merge_requests

# Deploy to Production (auf dem gleichen Server)
deploy:
  stage: deploy
  script:
    - echo "üöÄ Deploying voting tool..."
    
    # Backup erstellen
    - |
      if [ -f "${DEPLOY_PATH}/docker-compose.yml" ]; then
        cp ${DEPLOY_PATH}/docker-compose.yml ${DEPLOY_PATH}/docker-compose.yml.backup.$(date +%Y%m%d_%H%M%S)
        echo "‚úÖ Backup created"
      fi
      
      # Verzeichnis erstellen falls nicht vorhanden
      mkdir -p ${DEPLOY_PATH}
      
      # Docker-Compose und andere Dateien kopieren
      cp voting-tool/docker/production/docker-compose.yml ${DEPLOY_PATH}/
      
      # .env Datei erstellen mit den neuesten Image Tags
      cat > ${DEPLOY_PATH}/.env << EOF
      # Docker Images
      API_IMAGE=${API_IMAGE}:${CI_COMMIT_SHORT_SHA}
      CLIENT_IMAGE=${CLIENT_IMAGE}:${CI_COMMIT_SHORT_SHA}
      
      # Application Settings
      DOMAIN=${DOMAIN}
      NODE_ENV=production
      
      # Database (wird aus GitLab CI/CD Variablen gelesen)
      DATABASE_HOST=db
      DATABASE_USER=${DATABASE_USER}
      DATABASE_PASSWORD=${DATABASE_PASSWORD}
      DATABASE_NAME=${DATABASE_NAME}
      DATABASE_ROOT_PASSWORD=${DATABASE_ROOT_PASSWORD}
      
      # JWT Secret
      JWT_SECRET=${JWT_SECRET}
      
      # Email Settings
      EMAIL_HOST=${EMAIL_HOST}
      EMAIL_PORT=${EMAIL_PORT}
      EMAIL_USER=${EMAIL_USER}
      EMAIL_PASSWORD=${EMAIL_PASSWORD}
      EOF
      
      # Deploy mit docker-compose
      cd ${DEPLOY_PATH}
      docker compose pull
      docker compose up -d --remove-orphans
      
      # Status anzeigen
      docker ps | grep voting
      echo "‚úÖ Voting tool deployment completed"
  
  environment:
    name: production
    url: https://${DOMAIN}
  when: manual
  only:
    - main
  needs:
    - build_api
    - build_client
  tags:
    - docker
    - deploy

# Rollback Job
rollback:
  stage: deploy
  script:
    - echo "‚è™ Rolling back voting tool..."
    
    # Find latest backup
    - |
      cd ${DEPLOY_PATH}
      latest_backup=$(ls -t docker-compose.yml.backup.* 2>/dev/null | head -1)
      
      if [ -n "$latest_backup" ]; then
        echo "Found backup: $latest_backup"
        cp $latest_backup docker-compose.yml
        docker compose up -d --remove-orphans
        echo "‚úÖ Rollback completed"
      else
        echo "‚ùå No backup found!"
        exit 1
      fi
  when: manual
  only:
    - main
  tags:
    - docker
    - deploy